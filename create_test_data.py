#!/usr/bin/env python3
import os
import sys
import django
from datetime import datetime, timedelta
import random

# Setup Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'solar_backend.settings')
django.setup()

from users.models import ProfilUser
from module.models import Modules, ModulesInfo, ModulesDetail
from battery.models import Battery, BatteryData, BatteryPlanning, BatteryReference, BatteryRelaiState
from panneau.models import Panneau, PanneauData, PanneauPlanning, PanneauReference, PanneauRelaiState
from prise.models import Prise, PriseData, PrisePlanning, PriseReference, PriseRelaiState
from notification.models import Notification

def create_test_user():
    """Cr√©er un utilisateur de test"""
    try:
        user = ProfilUser.objects.get(email="brokewala@gmail.com")
        print(f"Utilisateur existant trouv√©: {user.email}")
    except ProfilUser.DoesNotExist:
        user = ProfilUser.objects.create_user(
            email="brokewala@gmail.com",
            password="broke2212916",
            first_name="Test",
            last_name="User",
            phone="+33123456789",
            adresse="123 Rue de la Paix",
            code_postal="75001",
            status=True
        )
        print(f"Utilisateur cr√©√©: {user.email}")

    return user

def create_test_module(user):
    """Cr√©er un module de test"""
    try:
        module = Modules.objects.get(user=user)
        print(f"Module existant trouv√©: {module.reference}")
    except Modules.DoesNotExist:
        module = Modules.objects.create(
            user=user,
            reference="SOL-001",
            identifiant="module_test_001",
            password="module123",
            active=True
        )
        print(f"Module cr√©√©: {module.reference}")

    return module

def create_test_battery(module):
    """Cr√©er une batterie de test avec des donn√©es"""
    try:
        battery = Battery.objects.get(module=module)
        print(f"Batterie existante trouv√©e: {battery.marque}")
    except Battery.DoesNotExist:
        battery = Battery.objects.create(
            module=module,
            marque="Tesla Powerwall",
            puissance="5000",
            voltage="48"
        )
        print(f"Batterie cr√©√©e: {battery.marque}")

    # Cr√©er des donn√©es de batterie
    BatteryData.objects.filter(battery=battery).delete()
    for i in range(24):  # 24 heures de donn√©es
        BatteryData.objects.create(
            battery=battery,
            tension=str(48 + random.uniform(-2, 2)),
            puissance=str(random.uniform(1000, 4000)),
            courant=str(random.uniform(20, 80)),
            energy=str(random.uniform(2000, 5000)),
            pourcentage=str(random.uniform(20, 95))
        )

    print(f"Donn√©es de batterie cr√©√©es: 24 entr√©es")
    return battery

def create_test_panneau(module):
    """Cr√©er un panneau solaire de test avec des donn√©es"""
    try:
        panneau = Panneau.objects.get(module=module)
        print(f"Panneau existant trouv√©: {panneau.marque}")
    except Panneau.DoesNotExist:
        panneau = Panneau.objects.create(
            module=module,
            marque="SunPower",
            puissance="300",
            voltage="24"
        )
        print(f"Panneau cr√©√©: {panneau.marque}")

    # Cr√©er des donn√©es de panneau
    PanneauData.objects.filter(panneau=panneau).delete()
    for i in range(24):  # 24 heures de donn√©es
        # Simulation de production solaire (plus √©lev√©e en journ√©e)
        hour = i
        if 6 <= hour <= 18:  # Journ√©e
            base_power = random.uniform(100, 280)
        else:  # Nuit
            base_power = 0

        PanneauData.objects.create(
            panneau=panneau,
            tension=str(24 + random.uniform(-1, 1)),
            puissance=str(base_power),
            courant=str(base_power / 24 if base_power > 0 else 0),
            production=str(base_power * 1.2)
        )

    print(f"Donn√©es de panneau cr√©√©es: 24 entr√©es")
    return panneau

def create_test_prise(module):
    """Cr√©er une prise de test avec des donn√©es"""
    try:
        prise = Prise.objects.get(module=module)
        print(f"Prise existante trouv√©e: {prise.name}")
    except Prise.DoesNotExist:
        prise = Prise.objects.create(
            module=module,
            name="Prise Principale",
            voltage="220"
        )
        print(f"Prise cr√©√©e: {prise.name}")

    # Cr√©er des donn√©es de prise
    PriseData.objects.filter(prise=prise).delete()
    for i in range(24):  # 24 heures de donn√©es
        # Simulation de consommation (plus √©lev√©e en soir√©e)
        hour = i
        if 18 <= hour <= 23 or 6 <= hour <= 9:  # Heures de pointe
            base_power = random.uniform(800, 1500)
        elif 9 <= hour <= 18:  # Journ√©e normale
            base_power = random.uniform(200, 800)
        else:  # Nuit
            base_power = random.uniform(50, 200)

        PriseData.objects.create(
            prise=prise,
            tension=str(220 + random.uniform(-5, 5)),
            puissance=str(base_power),
            courant=str(base_power / 220),
            consomation=str(base_power * 1.1)
        )

    print(f"Donn√©es de prise cr√©√©es: 24 entr√©es")
    return prise

def create_test_notifications(user):
    """Cr√©er des notifications de test"""
    notifications = [
        "Batterie faible: 25% de charge restante",
        "Production solaire optimale d√©tect√©e",
        "Consommation √©lev√©e sur la prise principale",
        "Maintenance programm√©e dans 7 jours",
        "Nouveau record de production aujourd'hui!"
    ]

    Notification.objects.filter(user=user).delete()
    for i, message in enumerate(notifications):
        Notification.objects.create(
            user=user,
            message=message,
            read=i < 2  # Les 2 premi√®res sont lues
        )

    print(f"Notifications cr√©√©es: {len(notifications)} entr√©es")

def main():
    print("üöÄ Cr√©ation des donn√©es de test...")

    # Cr√©er l'utilisateur
    user = create_test_user()

    # Cr√©er le module
    module = create_test_module(user)

    # Cr√©er les composants avec des donn√©es
    battery = create_test_battery(module)
    panneau = create_test_panneau(module)
    prise = create_test_prise(module)

    # Cr√©er des notifications
    create_test_notifications(user)

    print("\n‚úÖ Donn√©es de test cr√©√©es avec succ√®s!")
    print(f"üìß Email: {user.email}")
    print(f"üîë Mot de passe: broke2212916")
    print(f"üè† Module: {module.reference}")
    print(f"üîã Batterie: {battery.marque}")
    print(f"‚òÄÔ∏è Panneau: {panneau.marque}")
    print(f"üîå Prise: {prise.name}")

if __name__ == "__main__":
    main()
