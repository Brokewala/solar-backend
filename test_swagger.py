#!/usr/bin/env python3
"""
Script de test pour v√©rifier que l'API Swagger fonctionne correctement.
Ce script teste les endpoints principaux et v√©rifie la documentation Swagger.
"""

import requests
import json
import time
from urllib.parse import urljoin

# Configuration
BASE_URL = "http://localhost:8000"
SWAGGER_URL = urljoin(BASE_URL, "/swagger/")
REDOC_URL = urljoin(BASE_URL, "/redoc/")
SWAGGER_JSON_URL = urljoin(BASE_URL, "/swagger.json")

def test_swagger_endpoints():
    """Teste les endpoints Swagger"""
    print("üîç Test des endpoints Swagger...")
    
    # Test Swagger UI
    try:
        response = requests.get(SWAGGER_URL, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Swagger UI accessible")
        else:
            print(f"‚ùå Swagger UI erreur: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur acc√®s Swagger UI: {e}")
    
    # Test ReDoc
    try:
        response = requests.get(REDOC_URL, timeout=10)
        if response.status_code == 200:
            print("‚úÖ ReDoc accessible")
        else:
            print(f"‚ùå ReDoc erreur: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur acc√®s ReDoc: {e}")
    
    # Test Swagger JSON
    try:
        response = requests.get(SWAGGER_JSON_URL, timeout=10)
        if response.status_code == 200:
            print("‚úÖ Swagger JSON accessible")
            # V√©rifier le contenu du JSON
            swagger_data = response.json()
            if 'info' in swagger_data:
                info = swagger_data['info']
                print(f"   üìã Titre: {info.get('title', 'N/A')}")
                print(f"   üìã Version: {info.get('version', 'N/A')}")
                print(f"   üìã Description: {info.get('description', 'N/A')[:100]}...")
            if 'paths' in swagger_data:
                paths = swagger_data['paths']
                print(f"   üìã Nombre d'endpoints: {len(paths)}")
        else:
            print(f"‚ùå Swagger JSON erreur: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur acc√®s Swagger JSON: {e}")

def test_api_endpoints():
    """Teste quelques endpoints de l'API"""
    print("\nüîç Test des endpoints API...")
    
    # Test endpoint admin
    try:
        response = requests.get(urljoin(BASE_URL, "/admin/"), timeout=10)
        if response.status_code == 200:
            print("‚úÖ Admin Django accessible")
        else:
            print(f"‚ö†Ô∏è  Admin Django: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur acc√®s Admin: {e}")
    
    # Test endpoints API (sans authentification)
    api_endpoints = [
        "/api/solar/battery/all",
        "/api/solar/panneau/all",
        "/api/solar/prise/all",
        "/api/solar/modules/all",
    ]
    
    for endpoint in api_endpoints:
        try:
            response = requests.get(urljoin(BASE_URL, endpoint), timeout=10)
            if response.status_code in [200, 401, 403]:  # 401/403 sont normaux sans auth
                print(f"‚úÖ {endpoint} - {response.status_code}")
            else:
                print(f"‚ö†Ô∏è  {endpoint} - {response.status_code}")
        except Exception as e:
            print(f"‚ùå {endpoint} - Erreur: {e}")

def test_swagger_schema():
    """Teste la structure du sch√©ma Swagger"""
    print("\nüîç Test de la structure Swagger...")
    
    try:
        response = requests.get(SWAGGER_JSON_URL, timeout=10)
        if response.status_code == 200:
            swagger_data = response.json()
            
            # V√©rifier les sections principales
            required_sections = ['openapi', 'info', 'paths']
            for section in required_sections:
                if section in swagger_data:
                    print(f"‚úÖ Section {section} pr√©sente")
                else:
                    print(f"‚ùå Section {section} manquante")
            
            # V√©rifier les applications dans les paths
            paths = swagger_data.get('paths', {})
            expected_apps = ['battery', 'panneau', 'prise', 'modules', 'users']
            
            for app in expected_apps:
                app_paths = [path for path in paths.keys() if f'/api/solar/{app}/' in path]
                if app_paths:
                    print(f"‚úÖ Application {app}: {len(app_paths)} endpoints")
                else:
                    print(f"‚ö†Ô∏è  Application {app}: aucun endpoint trouv√©")
            
            # V√©rifier les m√©thodes HTTP
            http_methods = set()
            for path, methods in paths.items():
                http_methods.update(methods.keys())
            
            print(f"‚úÖ M√©thodes HTTP support√©es: {', '.join(sorted(http_methods))}")
            
        else:
            print(f"‚ùå Impossible de r√©cup√©rer le sch√©ma Swagger: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur test sch√©ma: {e}")

def main():
    """Fonction principale"""
    print("üöÄ Test de l'API Solar avec Swagger")
    print("=" * 50)
    
    # Attendre que le serveur d√©marre
    print("‚è≥ Attente du d√©marrage du serveur...")
    time.sleep(3)
    
    # Tests
    test_swagger_endpoints()
    test_api_endpoints()
    test_swagger_schema()
    
    print("\n" + "=" * 50)
    print("üéâ Tests termin√©s!")
    print("\nüìñ Pour acc√©der √† la documentation:")
    print(f"   ‚Ä¢ Swagger UI: {SWAGGER_URL}")
    print(f"   ‚Ä¢ ReDoc: {REDOC_URL}")
    print(f"   ‚Ä¢ JSON Schema: {SWAGGER_JSON_URL}")

if __name__ == "__main__":
    main() 