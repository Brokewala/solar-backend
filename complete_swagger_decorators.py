#!/usr/bin/env python3
"""
Script pour compl√©ter automatiquement l'ajout des d√©corateurs Swagger manquants
√† toutes les vues Django REST Framework du projet solar_backend.
"""

import os
import re
from pathlib import Path

def add_swagger_decorators_to_remaining_views():
    """Ajoute les d√©corateurs Swagger manquants aux vues restantes"""
    
    # Applications √† traiter
    apps = ['report', 'subscription']
    
    for app in apps:
        views_file = Path(f"{app}/views.py")
        if views_file.exists():
            print(f"Traitement de {views_file}...")
            
            with open(views_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Ajouter les d√©corateurs aux classes APIView restantes
            content = add_decorators_to_api_view_classes(content, app)
            
            # Sauvegarder le fichier modifi√©
            with open(views_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ {views_file} trait√© avec succ√®s")

def add_decorators_to_api_view_classes(content, app_name):
    """Ajoute les d√©corateurs Swagger aux classes APIView"""
    
    # Patterns pour identifier les classes APIView sans d√©corateurs
    patterns = {
        'ReportAPIView': {
            'post': {
                'description': "Cr√©e un nouveau rapport",
                'request_body': {
                    'required': ['description', 'priority', 'user', 'closed'],
                    'properties': {
                        'description': 'Description du rapport',
                        'priority': 'Priorit√© du rapport',
                        'user': 'ID de l\'utilisateur',
                        'closed': 'Statut de fermeture du rapport'
                    }
                },
                'responses': {
                    201: 'ReportSerializer',
                    400: 'Donn√©es manquantes',
                    500: 'Internal Server Error'
                }
            },
            'get': {
                'description': "R√©cup√®re un rapport par son ID",
                'manual_parameters': ['report_id'],
                'responses': {
                    200: 'ReportSerializer',
                    404: 'Rapport non trouv√©',
                    500: 'Internal Server Error'
                }
            },
            'put': {
                'description': "Met √† jour un rapport par son ID",
                'manual_parameters': ['report_id'],
                'request_body': {
                    'properties': {
                        'description': 'Description du rapport',
                        'priority': 'Priorit√© du rapport',
                        'closed': 'Statut de fermeture du rapport'
                    }
                },
                'responses': {
                    200: 'ReportSerializer',
                    404: 'Rapport non trouv√©',
                    500: 'Internal Server Error'
                }
            },
            'delete': {
                'description': "Supprime un rapport par son ID",
                'manual_parameters': ['report_id'],
                'responses': {
                    204: 'Rapport supprim√© avec succ√®s',
                    404: 'Rapport non trouv√©',
                    500: 'Internal Server Error'
                }
            }
        },
        'SubscriptionAPIView': {
            'post': {
                'description': "Cr√©e un nouvel abonnement",
                'request_body': {
                    'required': ['user_id', 'name'],
                    'properties': {
                        'user_id': 'ID de l\'utilisateur',
                        'name': 'Nom de l\'abonnement',
                        'stockage_ensuel': 'Stockage mensuel',
                        'assistance': 'Assistance',
                        'entretien': 'Entretien',
                        'monitoring': 'Monitoring',
                        'remote_control': 'Contr√¥le √† distance',
                        'planing': 'Planification',
                        'alert': 'Alertes'
                    }
                },
                'responses': {
                    201: 'SubscriptionSerializer',
                    400: 'Donn√©es manquantes',
                    500: 'Internal Server Error'
                }
            },
            'get': {
                'description': "R√©cup√®re un abonnement par son ID",
                'manual_parameters': ['sub_id'],
                'responses': {
                    200: 'SubscriptionSerializer',
                    404: 'Abonnement non trouv√©',
                    500: 'Internal Server Error'
                }
            },
            'put': {
                'description': "Met √† jour un abonnement par son ID",
                'manual_parameters': ['sub_id'],
                'request_body': {
                    'properties': {
                        'name': 'Nom de l\'abonnement',
                        'stockage_ensuel': 'Stockage mensuel',
                        'assistance': 'Assistance',
                        'entretien': 'Entretien',
                        'monitoring': 'Monitoring',
                        'remote_control': 'Contr√¥le √† distance',
                        'planing': 'Planification',
                        'alert': 'Alertes'
                    }
                },
                'responses': {
                    200: 'SubscriptionSerializer',
                    404: 'Abonnement non trouv√©',
                    500: 'Internal Server Error'
                }
            },
            'delete': {
                'description': "Supprime un abonnement par son ID",
                'manual_parameters': ['sub_id'],
                'responses': {
                    204: 'Abonnement supprim√© avec succ√®s',
                    404: 'Abonnement non trouv√©',
                    500: 'Internal Server Error'
                }
            }
        }
    }
    
    # Appliquer les d√©corateurs pour chaque classe
    for class_name, methods in patterns.items():
        for method_name, config in methods.items():
            decorator = generate_swagger_decorator(method_name, config, app_name)
            
            # Trouver la m√©thode et ajouter le d√©corateur
            pattern = rf'(\s+)def {method_name}\(self, request'
            replacement = rf'{decorator}\n\1def {method_name}(self, request'
            
            content = re.sub(pattern, replacement, content)
    
    return content

def generate_swagger_decorator(method_name, config, app_name):
    """G√©n√®re un d√©corateur Swagger bas√© sur la configuration"""
    
    decorator = f"""    @swagger_auto_schema(
        operation_description="{config['description']}",
"""
    
    # Ajouter les param√®tres manuels
    if 'manual_parameters' in config:
        decorator += "        manual_parameters=[\n"
        for param in config['manual_parameters']:
            decorator += f"""            openapi.Parameter(
                '{param}',
                openapi.IN_PATH,
                description="Identifiant unique du {param.replace('_', ' ')}",
                type=openapi.TYPE_STRING,
                required=True
            ),\n"""
        decorator += "        ],\n"
    
    # Ajouter le request_body
    if 'request_body' in config:
        decorator += f"""        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
"""
        if 'required' in config['request_body']:
            decorator += f"""            required={config['request_body']['required']},
"""
        decorator += "            properties={\n"
        for prop, desc in config['request_body']['properties'].items():
            decorator += f"""                '{prop}': openapi.Schema(type=openapi.TYPE_STRING, description='{desc}'),\n"""
        decorator += "            }\n        ),\n"
    
    # Ajouter les r√©ponses
    decorator += "        responses={\n"
    for status_code, response in config['responses'].items():
        if isinstance(response, str) and 'Serializer' in response:
            decorator += f"""            {status_code}: {response},\n"""
        else:
            decorator += f"""            {status_code}: openapi.Response('{response}'),\n"""
    decorator += "        }\n    )"
    
    return decorator

def main():
    """Fonction principale"""
    print("üöÄ Compl√©tion des d√©corateurs Swagger manquants")
    print("=" * 50)
    
    # Changer vers le r√©pertoire du projet
    os.chdir(Path(__file__).parent)
    
    # Ajouter les d√©corateurs manquants
    add_swagger_decorators_to_remaining_views()
    
    print("\n" + "=" * 50)
    print("üéâ Compl√©tion termin√©e!")
    print("\nüìã R√©sum√© des actions effectu√©es:")
    print("   ‚Ä¢ Ajout des d√©corateurs Swagger aux classes APIView restantes")
    print("   ‚Ä¢ Documentation compl√®te des endpoints")
    print("   ‚Ä¢ Am√©lioration de la documentation Swagger")

if __name__ == "__main__":
    main() 